document.addEventListener('DOMContentLoaded', () => {
    const carousel = document.querySelector('.carousel');
    const prevButton = document.querySelector('.prev-button');
    const nextButton = document.querySelector('.next-button');

    // Dados dos momentos (pode vir de uma API, JSON, etc.)
    const momentsData = [
        {
            id: 1,
            image: '../img/junimo.jpg',
            date: '04/04/2025',
            text: 'Arthur, essa foto √© uma das minhas favoritas suas ja que voc√™ t√° parecendo um Junimo, e isso me faz rir toda vez que vejo. Foi um momento engra√ßado e fofo demais... mesmo que eu tenha sentido um pouquinho de ci√∫mes da Mota naquele dia. üíö'
        },
        {
            id: 2,
            image: '../img/espelho.jpg',
            date: '04/07/2025',
            text: 'N√£o gostei muito das minhas unhas nessa foto, mas o seu abra√ßo‚Ä¶ ele apaga qualquer detalhe bobo. √â o tipo de abra√ßo que faz tudo parar, que me acalma, que me faz sentir em casa. Voc√™ tem esse efeito em mim.'
        },
        {
            id: 3,
            image: '../img/kj.jpg',
            date: '01/06/2025',
            text: ' lembra desse dia? A gente assistiu o jogo do Cruzeiro e Palmeiras aqui em casa, e o Kaio Jorge meteu logo dois gols em menos de 15 minutos! Cruzeiro ganhou de 2x1, e olha que at√© agora voc√™ t√° me devendo aquela aposta'
        },
        {
            id: 4,
            image: '../img/pokemon.jpg',
            date: '21/04/2025',
            text: 'Pode n√£o ser nada grandioso, mas foi feito pensando em voc√™ do in√≠cio ao fim cada tra√ßo, cada detalhe. Foi meu jeitinho de dizer o quanto voc√™ √© importante pra mim. Foi um bom presente? Porque pra mim, ele carrega tudo o que eu sinto.'
        },
        {
            id: 5,
            video: '../img/tutu.mp4',
            date: '02/05/2025',
            text: 'Eu amo demais o seu jeito bob√£o. S√©rio, desde aquele seu humor que √†s vezes √© t√£o question√°vel que s√≥ eu entendo, at√© aqueles gestos bobinhos que voc√™ faz. sla tudo isso me derrete.'
        },
        {
            id: 6,
            image: '../img/foto.jpg',
            date: '04/04/2025',
            text: 'Essa aqui foi a nossa primeira foto juntos. Foi legal! Um dos primeiros intervalos que passamos juntos, e foi quando eu comecei a me soltar mais, me sentir mais √† vontade com voc√™. Tem algo especial nessa imagem porque marca o come√ßo de tantas coisas boas que a gente ainda vai viver. '
        },
        {
            id: 7,
            image: '../img/carro.jpg',
            date: '10/05/2025',
            text: 'Larry face! Sally face! S√≥ que ao inv√©s disso... Aninha balacobaco! Arthur Daora!'
        },
        {
            id: 8,
            image: '../img/palmeiras.jpg',
            date: 'n√£o lembro a data',
            text: 'N√£o tem como eu n√£o lembrar de voc√™ quando vejo qualquer coisa do Palmeiras. Mas, claro, isso n√£o te define s√≥ como palmeirense, porque voc√™ √© muito mais do que isso. Vi aquele broche e j√° pensei em voc√™ na hora, como pode? Kkkk, at√© nisso voc√™ t√° sempre presente no meu dia.'
        },
        {
            id: 9,
            image: '../img/escola.jpg',
            date: '15/05/2025',
            text: 'N√£o lembro muito desse dia, mas t√° ai. Uma foto legal :)'
        },
        {
            id: 10,
            image: '../img/kindred.jpg',
            date: '04/07/2025',
            text: '"Nunca um sem o outro" √© a frase do meu campe√£o favorito no LoL, os Kindred.  o Lobo e a Ovelha. Essa frase define demais a rela√ß√£o deles, que √© insepar√°vel, e me faz pensar na gente. Porque, assim como eles, a gente tamb√©m √© assim.'
        },
        {
            id: 10,
            image: '../img/goku.png',
            date: '04/07/2025',
            text: 'Eu amo ver voc√™ feliz. Mesmo que aquela bala tivesse um gosto super duvidoso, foi legal compartilhar aquele momento com voc√™. Essas pequenas coisas, meio estranhas at√©, ficam especiais porque a gente t√° junto. Quero sempre mais momentos assim com voc√™.'
        },
        {
            id: 11,
            image: '../img/igreja.jpg',
            date: '06/07/2025',
            text: '"A gente preferiu andar pelo citro doq ficar¬†na¬†igreja" - Arthur'
        },
        {
            id: 12,
            image: '../img/igreja.jpg',
            date: '06/07/2025',
            text: '"A gente preferiu andar pelo citro doq ficar¬†na¬†igreja" - Arthur'
        },
        {
            id: 13,
            image: '../img/igreja.jpg',
            date: '06/07/2025',
            text: '"A gente preferiu andar pelo citro doq ficar¬†na¬†igreja" - Arthur'
        },
           
        // Adicione mais momentos conforme necess√°rio
    ];

    let currentIndex = 0;
    let cardsPerView = 3; // Padr√£o para desktop
    let isMobile = false;

    // Fun√ß√£o para renderizar os cards no carrossel
    function renderCards() {
        carousel.innerHTML = ''; // Limpa o carrossel

        // Determine quais cards devem ser exibidos
        let startIndex;
        let endIndex;

        if (isMobile) {
            // Em mobile, renderizamos todos os cards e deixamos o CSS/scroll snap fazer a pagina√ß√£o
            startIndex = 0;
            endIndex = momentsData.length;
        } else {
            // Em desktop, exibimos apenas 3 cards por vez e "avan√ßamos" o conte√∫do
            // A l√≥gica de `currentIndex` controla qual √© o primeiro dos 3 vis√≠veis
            startIndex = currentIndex;
            endIndex = currentIndex + cardsPerView;

            // Se chegarmos ao final e n√£o houver 3 cards completos, ajusta para mostrar os √∫ltimos 3
            if (endIndex > momentsData.length) {
                startIndex = momentsData.length - cardsPerView;
                if (startIndex < 0) startIndex = 0; // Garante que n√£o seja negativo
                endIndex = momentsData.length;
            }
        }

        // Cria e adiciona os cards ao DOM
        momentsData.slice(startIndex, endIndex).forEach(moment => {
            const cardContainer = document.createElement('div');
            cardContainer.classList.add('card-container');
            // No mobile, todos os cards s√£o vis√≠veis e rol√°veis. No desktop, a classe hidden-desktop pode ser removida se o slice j√° gerencia isso.
            // Para simplicidade e garantir que todos os cards sejam sempre criados no HTML e s√≥ o CSS/scroll se encarregue do "esconder", n√£o usaremos hidden-desktop aqui.

            cardContainer.innerHTML = `
                <div class="card">
                    <div class="card-front">
                        ${moment.video
                                ? `<video controls width="250" class="video-element">
                                    <source src="${moment.video}" type="video/mp4">
                                    Seu navegador n√£o suporta v√≠deo.
                                </video>`
                                : `<div class="image-placeholder" style="background-image: url('${moment.image}');"></div>`
                            }
                        <div class="card-date">${moment.date}</div>
                    </div>
                    <div class="card-back">
                        <p>${moment.text}</p>
                    </div>
                </div>
            `;
            carousel.appendChild(cardContainer);

            // Adiciona o evento de clique para virar o card
            const cardElement = cardContainer.querySelector('.card');
            cardContainer.addEventListener('click', () => {
                cardElement.classList.toggle('flipped');
            });
        });

        // Para mobile, renderizamos todos os cards, a rolagem nativa cuida da visualiza√ß√£o
        // Para desktop, precisamos garantir que o scroll esteja na posi√ß√£o correta se a p√°gina foi redimensionada
        if (!isMobile) {
            carousel.scrollLeft = 0; // Garante que o scroll esteja no in√≠cio do bloco de 3 cards vis√≠veis
        }

        updateNavButtons();
    }

    // Fun√ß√£o para atualizar os bot√µes de navega√ß√£o (visibilidade/estado)
    function updateNavButtons() {
        // Os bot√µes s√£o vis√≠veis apenas em desktop (definido no CSS)
        // Apenas habilita/desabilita para a navega√ß√£o por clique
        if (!isMobile) {
            prevButton.disabled = currentIndex === 0;
            nextButton.disabled = currentIndex + cardsPerView >= momentsData.length;
        }
    }

    // Fun√ß√£o para navegar para o pr√≥ximo conjunto de cards (usado por bot√µes em desktop)
    function showNextCards() {
        if (!isMobile) { // Apenas para desktop
            if (currentIndex + cardsPerView < momentsData.length) {
                currentIndex++;
                renderCards();
            }
        }
    }

    // Fun√ß√£o para navegar para o conjunto anterior de cards (usado por bot√µes em desktop)
    function showPrevCards() {
        if (!isMobile) { // Apenas para desktop
            if (currentIndex > 0) {
                currentIndex--;
                renderCards();
            }
        }
    }

    // Event Listeners para os bot√µes de navega√ß√£o (apenas relevantes para desktop)
    nextButton.addEventListener('click', showNextCards);
    prevButton.addEventListener('click', showPrevCards);

    // Fun√ß√£o para verificar se √© mobile e ajustar a exibi√ß√£o
    function checkScreenSize() {
        const wasMobile = isMobile;
        isMobile = window.innerWidth <= 768; // Defina seu breakpoint mobile aqui

        if (isMobile !== wasMobile) { // Se o modo mudou (desktop <-> mobile)
            currentIndex = 0; // Reseta o √≠ndice ao mudar de modo
            // No mobile, `cardsPerView` √© logicamente 1 (um por tela) para o snap-scroll
            // No desktop, √© 3.
            cardsPerView = isMobile ? 1 : 3;
            renderCards();
        } else if (!isMobile) { // Se ainda em desktop, apenas re-renderiza para ajustar o layout
            renderCards();
        }
        updateNavButtons(); // Atualiza visibilidade/estado dos bot√µes
    }

    // Event listener para redimensionamento da janela
    window.addEventListener('resize', checkScreenSize);

    // Inicializa o carrossel na carga da p√°gina
    checkScreenSize();
});
